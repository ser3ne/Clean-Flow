#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

BLECharacteristic *pCharacteristic;
BLEServer *pServer;
bool deviceConnected = false;

// UUIDs for BLE service and characteristic
#define SERVICE_UUID "59 6d 56 69 4e 54 51 34 4d 32 55 74 4d 7a 5a 6c 4d 53 30 30 4e 6a 67 34 4c 57 49 33 5a 6a 55 74 5a 57 45 77 4e 7a 4d 32 4d 57 49 79 4e 6d 45 34"
#define CHARACTERISTIC_UUID "4e 47 5a 68 5a 6d 4d 79 4d 44 45 74 4d 57 5a 69 4e 53 30 30 4e 54 6c 6c 4c 54 68 6d 59 32 4d 74 59 7a 56 6a 4f 57 4d 7a 4d 7a 45 35 4d 54 52 69"

// Callback to handle client connection and disconnection events
class MyServerCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      Serial.println("Client connected");
    }

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      Serial.println("Client disconnected, restarting advertising...");
      // Restart advertising after the client disconnects
      BLEDevice::startAdvertising();
    }
};

void setup() {
  Serial.begin(115200);

  // Initialize BLE
  BLEDevice::init("Clean-Flow");

  // Create BLE server and set the callback
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create BLE service
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Create a BLE characteristic with READ and NOTIFY properties
  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY
  );

  // Add a BLE2902 descriptor for notifications
  pCharacteristic->addDescriptor(new BLE2902());

  // Start the service
  pService->start();

  // Start advertising
  BLEDevice::startAdvertising();
  Serial.println("Waiting for a client connection...");
}

void loop() {
  // Empty loop for now
}
