#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

BLECharacteristic *pCharacteristic;
BLEServer *pServer;
bool deviceConnected = false;

// UUIDs for BLE service and characteristic
#define SERVICE_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"
#define CHARACTERISTIC_UUID "4fafc201-1fb5-459e-8fcc-c5c9c331914b"

// Callback to handle client connection and disconnection events
class MyServerCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      Serial.println("Client connected");
    }

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      Serial.println("Client disconnected, restarting advertising...");
      // Restart advertising after the client disconnects
      BLEDevice::startAdvertising();
    }
};

void setup() {
  Serial.begin(9600);       // Initialize serial monitor on ESP32
  Serial2.begin(9600, SERIAL_8N1, 16, 17);  // Initialize Serial2 on RX (GPIO 16) and TX (GPIO 17)
    // Initialize BLE
  BLEDevice::init("Clean-Flow");

  // Create BLE server and set the callback
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create BLE service
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Create a BLE characteristic with READ and NOTIFY properties
  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY);
      // Add a BLE2902 descriptor for notifications
  pCharacteristic->addDescriptor(new BLE2902());

  // Start the service
  pService->start();

  // Start advertising
  BLEDevice::startAdvertising();
  Serial.println("Waiting for a client connection...");
}

void loop() {
  // Check if data is available on Serial2 (connected to Arduino Nano)
  if (Serial2.available()) {
    String receivedData = Serial2.readStringUntil('\n');  // Read the incoming data until newline

    // Split the received data using the comma as a delimiter
    int commaIndex = receivedData.indexOf(',');
    if (commaIndex != -1 && deviceConnected) {
      String voltageStr = receivedData.substring(0, commaIndex);
      String cleanVoltagePercentageStr = receivedData.substring(commaIndex + 1);

      // Convert the string values to float or display them as needed
      // float voltage = voltageStr.toFloat();
      // float cleanVoltagePercentage = cleanVoltagePercentageStr.toFloat();

      // Print the separated values to Serial Monitor
      Serial.print("Received Voltage: ");
      Serial.println(voltageStr);
      Serial.print("Clean Voltage Percentage: ");
      Serial.println(cleanVoltagePercentageStr);
      
      String combinedData = String(voltageStr) + "," + String(cleanVoltagePercentageStr);

      // Set the combined data as the characteristic value and notify
      pCharacteristic->setValue(combinedData);
      pCharacteristic->notify();

    }
  }
  delay(200);
}
